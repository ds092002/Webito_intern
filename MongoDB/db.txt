v-1 what is mongodb
    -> Mongodb is databese server
    -> Document save as json formate
    -> less relation
    -> Data is Store together

    * BSON -> Document Store JSON formate but behind stored BSON  

v-2 Dawonlode Mongodb
    -> https://www.mongodb.com/try/download/community

V-3 install tedora


V-4 
    ---|| Create DB ||---
    * use yourDatabaseName    -> use Dhaval
    
    ---|| Create Collection ||---
    * db.createCollection     -> db.Students

    ---|| Inser One ||---
    * db.Students.insertOne({ name: "Jay", value: 143 })

    ---|| Show Collection In Data ||---
    * db.Students.find()

V-5 Nested Document
    ---|| Update Data ||---
    db.Students.updateOne({name:'jay'},{$set:{idcards:{hasPanCard:false,hasAdhaarCard:true}}})  
    ---|| Fine Data ||---  
    db.StudentsfindOne({name:'jay'})

V-6 CRUD
    ---|| CREATE ||---   
        ==> insertOne(data,options)
        ==> insertMany(data,options) 

    ---|| READ ||---    
        ==> find(filter,options)
        ==> findOne(filter,options)

    ---|| UPADATE ||---  
        ==> updateOne(filter,data,options)  
        ==> updateMany(filter,data,options)  
        ==> relaceOne(filter,data,options)  

    ---|| DELETE ||---    
        ==> deleteOne(filter,options)
        ==> deleteMany(filter,options)

V-7 Find Vs FindOne        
    ---> db.Students.find({age:'11'})     ==> Show all Date
    ---> db.Students.findOne({age:'11'})  ==> Show Frist Match Data

V-8  HOW TO INSERT DOCUMENTS IN Collection
    ==>  db.Students.insertOne({ name: "jay", age: 13 })
    ==>  db.Students.insertMany([{ name: "ram", age: 32 },{ name: "jay", age: 13 }])

V-9 HOW TO UPDATE DOCUMENT IN Mongodb
    ==> db.Students.updateOne({name:'ram'},{$set:{age:25}})
    ==> db.Students.updateMany({age:13},{$set:{age:15}})

V-10 HOW TO DELETE DOCUMENT IN Mongodb
    ==> db.Students.deleteMany({age:13})
    ==> db.Students.deleteOne({name:'jay'})
    ==> db.Students.deleteMany({})     => DELETE ALL DATA 

V-11 SELECT QUERY COLUMN
    ==> db.Students.find({},{name:1})               --> show _id and Name 
    ==> db.Students.find({},{name:1,_id:0,age:0})   --> Show Only name

V-12 IS MONGODB REALLY SCHEMALESS
    ==> {_id:1,name:"ram"}    
    ==> {_id:2,name:"ghanshyam"}    
    ==> {_id:3,name:"shyam",addharNo:23456}    

V-13 DATATYPE IN MONGODB
    ==> Text
    ==> Boolean
    ==> Number == 1. Integer - 32 bit , 2. NumberLong - 64 bit, 3. NumberDecimal
    ==> ObjectId
    ==> ISO Date
    ==> Timestamps
    ==> Array
    ==> Emd Document
    
    db.companyData.insertOne({ name: "DS" , isFunded: true, funding:845451364343215644 , employees: [ {name:"amit" , age:20}, {name:"bim" , age:23}], foundedOn: New Date(), foundedTimestamp: new Timestamps() })

V-14 DELETE DATABASE
    use mydb

    db.dropDatabase(); ==> Delete all databases
    db.product.drop() ==> delete only one database

V-15 ORDERD OPTION IN INSERT COMMAND

    db.books.insertMany([{name:"A", price:1}, {name:"B", price:2}])

    db.books.deleteMany({}) ==> {} empty object delete all data in books 

    db.books.insertMany([{_id:"A",name:"A", price:1}, {_id:"B",name:"B", price:2}])
    db.books.insertMany([{_id:"C",name:"C", price:1}, {_id:"A",name:"D", price:2},{_id:"E",name:"E", price:2}])

    _id A,B,C print thase baki nai thai pan pasal orderd: false lakhvathi je error se te sivay pasal na print thase 

    
    db.books.insertMany([{_id:"C",name:"C", price:1}, {_id:"A",name:"D", price:2},{_id:"E",name:"E", price:2}], orderd:false)


V-16  Schema Validation

    db.createCollection("nonfiction", {
  validator: {
    $jsonSchema: {
      required: ["name", "price"],
      properties: {
        name: {
          bsonType: "string",
          description: "must be a string and required",
        },
        price: {
          bsonType: "number",
          description: "must be a number and required",
        }
      }
    }
  },
  validationAction: "error",
});


V-17 Atomicity in MONGODB
    --> if user inter many time send 10 user data but 5 insert and 5 not insert that time
        Atomicity thay if all insert else not insert all

V-18 MongoImport In Mongodb

V-20 Comparison Operator
$eq  --> for equal
$ne  --> for not equal
$lt  --> for less than
$gt  --> for greater than
$lte --> for less than or equal to
$gte --> for greater than or equal to
$in  --> for in (to check if a value exists in an array)
$nin --> for not in (to check if a value does not exist in an array)

==> db.Students.find({age:{$eq:5}})
==> db.Students.find({age:{$ne:5}})

V-21 Logical Operator
    And ==>    db.Students.find({ $and: [ { age:{$lte:5} }, { age:{$gte:15} } ] })
    Or  ==>    db.Students.find({ $or: [ { condition1 }, { condition2 } ] })
    Not ==>    db.Students.find({ field: { $not: { condition } } })
    Nor ==>    db.Students.find({ $nor: [ { age:{$lte:5} }, { age:{$gte:15} } ] })

V-22 Mastring in mongodb
    ==> { field_name: { $exists: true } }
    ==> { field_name: { $exists: false } }
    ==> { field_name: { $type: "string" } }

V-24 array

V-25 Sort 
    Asending    => db.Students.find().sort( { age: 1} )    
    Desending    => db.Students.find().sort( { age: -1} )    

V-26 Advanced Update
        db.students.insert({ name: "John Doe", age: 20, grade: "A" });

        db.students.aggregate([
           { $group: { _id: null, minAge: { $min: "$age" } } }
        ]);

        db.students.aggregate([
           { $group: { _id: null, maxAge: { $max: "$age" } } }
        ]);

        db.students.update(
           { name: "John Doe" },
           { $mul: { age: 2 } }
        );

        db.students.update(
           { name: "John Doe" },
           { $unset: { grade: "" } }
        );

        db.students.update(
           { name: "John Doe" },
           { $rename: { "grade": "level" } }
        );

        db.students.update(
           { name: "John Doe" },
           { $set: { age: 21, grade: "B" } },
           { upsert: true }
        );

v-27 Array Update
    $push: Adds an element to an array.
    $pull: Removes specified elements from an array.
    $pop: Removes the first or last element from an array.
    $addToSet: Adds an element to an array only if it doesn't already exist there.

        db.collection.update(
           { _id: 1 },
           { $push: { scores: 89 } }
        )

        db.collection.update(
           { _id: 1 },
           { $pull: { scores: 89 } }
        )

        db.collection.update(
           { _id: 1 },
           { $pop: { scores: 1 } }  // Remove last element
        )
        db.collection.update(
           { _id: 1 },
           { $pop: { scores: -1 } } // Remove first element
        )

        db.collection.update(
           { _id: 1 },
           { $addToSet: { scores: 89 } }
        )
        
V-28 Indexing in mongodb

V-29 aggregation
    => db.collection.aggregate(pipeline,options)

    db.Students.aggregate( [ { $group: {_id:"$age",names: {$push:"$name"} } } ] )

V-30 Bucket use in aggregate

V-31 Lookup

****|| orders ||**
{ "_id": 1, "order_id": 101, "customer_id": 1, "amount": 500 }
{ "_id": 2, "order_id": 102, "customer_id": 2, "amount": 300 }

        ****|| customers ||**
{ "_id": 1, "customer_name": "Virat Kohli", "city": "Delhi" }
{ "_id": 2, "customer_name": "Rohit Sharma", "city": "Mumbai" }

    db.orders.aggregate([
   {
      $lookup:
         {
           from: "customers",
           localField: "customer_id",
           foreignField: "_id",
           as: "customer_info"
         }
   }
])

{
    "_id": 1,
    "order_id": 101,
    "customer_id": 1,
    "amount": 500,
    "customer_info": [
       {
          "_id": 1,
          "customer_name": "Virat Kohli",
          "city": "Delhi"
       }
    ]
 }
 {
    "_id": 2,
    "order_id": 102,
    "customer_id": 2,
    "amount": 300,
    "customer_info": [
       {
          "_id": 2,
          "customer_name": "Rohit Sharma",
          "city": "Mumbai"
       }
    ]
 }

V-32 Project


V-34
-> Authentication verifies the identity of users or clients trying to access the database.
    ==> Username/Password:
-> Authorization determines what actions authenticated users or clients are allowed to perform.
    ==> Read: Users can read data.
    ==> ReadWrite: Users can read and write data.
    ==> dbAdmin: Users can perform administrative tasks.
    ==> userAdmin: Users can manage user accounts and roles.


